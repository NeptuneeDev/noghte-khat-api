generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  createdAt         DateTime           @default(now())
  updateAt          DateTime           @default(now())
  password          String
  role              Role               @default(user)
  hashedRT          String?
  lastLoggedInTime  DateTime?
  comments          Comment[]
  UserFileReactions UserFileReaction[]
}

model Verification {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  try            Int      @default(0)
  code           String
  lastResendTime DateTime
}

model Professor {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  isVerified Boolean   @default(false)
  university String
  createdAt  DateTime
  updatedAt  DateTime
  comments   Comment[]
  lessons    Subject[]
}

model Subject {
  id          Int       @id @default(autoincrement())
  title       String
  professorId Int
  isVerified  Boolean   @default(false)
  createdAt   DateTime
  updatedAt   DateTime
  file        File[]
  professor   Professor @relation(fields: [professorId], references: [id])
}

model File {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  fileName          String
  isVerified        Boolean            @default(false)
  subjectId         Int
  createdAt         DateTime
  updatedAt         DateTime
  size              Int                @default(0)
  type              String             @default("")
  numberOfDisLikes  Int                @default(0)
  numberOfLikes     Int                @default(0)
  subject           Subject            @relation(fields: [subjectId], references: [id])
  UserFileReactions UserFileReaction[]
}

model UserFileReaction {
  fileId   Int
  userId   Int
  reaction UserReaction
  file     File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id])

  @@id([fileId, userId])
}

model Comment {
  id          Int        @id @default(autoincrement())
  subjectName String
  rollcall    String
  type        classType?
  teaching    Int        @default(5) @db.SmallInt
  rhetorical  Int        @default(5) @db.SmallInt
  manageClass Int        @default(5) @db.SmallInt
  ability     Int        @default(5) @db.SmallInt
  semester    DateTime?
  description String
  isVerified  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  professorId Int
  userId      Int
  professor   Professor  @relation(fields: [professorId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

enum Role {
  user
  admin
}

enum UserReaction {
  like
  dislike
}

enum classType {
  General
  Professional
  Science
}
