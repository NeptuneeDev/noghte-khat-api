generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  createdAt         DateTime           @default(now())
  updateAt          DateTime           @default(now())
  password          String?
  role              Role               @default(user)
  hashedRT          String?
  lastLoggedInTime  DateTime?
  comments          Comment[]
  UserFileReactions UserFileReaction[]
  rates             ProfessorRate[]
}

model Verification {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  try            Int      @default(0)
  code           String
  lastResendTime DateTime
}

model Professor {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique

  averageSubjectMastry       Decimal @default(0) @db.Decimal(2, 1)
  averageClassRoomManagement Decimal @default(0) @db.Decimal(2, 1)
  averageTeachingCoherence   Decimal @default(0) @db.Decimal(2, 1)
  averageGrading             Decimal @default(0) @db.Decimal(2, 1)

  isVerified Boolean         @default(false)
  university String
  createdAt  DateTime
  updatedAt  DateTime
  comments   Comment[]
  lessons    Subject[]
  rates      ProfessorRate[]
}

model Subject {
  id          Int       @id @default(autoincrement())
  title       String
  professorId Int
  isVerified  Boolean   @default(false)
  files       File[]
  createdAt   DateTime
  updatedAt   DateTime
  professor   Professor @relation(fields: [professorId], references: [id])
}

model File {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  fileName          String
  isVerified        Boolean            @default(false)
  subjectId         Int
  createdAt         DateTime
  updatedAt         DateTime
  size              Int                @default(0)
  type              String             @default("")
  numberOfDisLikes  Int                @default(0)
  numberOfLikes     Int                @default(0)
  subject           Subject            @relation(fields: [subjectId], references: [id])
  UserFileReactions UserFileReaction[]
}

model UserFileReaction {
  fileId   Int
  userId   Int
  reaction UserReaction
  file     File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id])

  @@id([fileId, userId])
}

model Comment {
  id Int @id @default(autoincrement())

  subjectName  String
  presenceRoll String // ghanone hozor ghiab
  description  String

  isVerified Boolean @default(false)

  professorId Int
  userId      Int

  professor     Professor      @relation(fields: [professorId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id])
  professorRate ProfessorRate?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ProfessorRate {
  subjectMastry       Decimal @db.Decimal(2, 1)
  classRoomManagement Decimal @db.Decimal(2, 1)
  teachingCoherence   Decimal @db.Decimal(2, 1) // yek parchegye tadris
  grading             Decimal @db.Decimal(2, 1)

  commentId   Int @unique
  userId      Int
  professorId Int

  professor Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([professorId, userId, commentId])
}

enum Role {
  user
  admin
}

enum UserReaction {
  like
  dislike
}
